#!/usr/bin/env bash
if (($# == 0)); then
	echo "error: file path was not provided"
	exit
fi

set -o noclobber -o noglob -o nounset -o pipefail
IFS=$'\n'

## Script arguments
FILE_PATH="${1}" # Full path of the highlighted file
if (($# == 1)); then
	PV_WIDTH=$(tput cols) # Width of the preview pane (number of fitting characters)
	PV_HEIGHT=$(tput lines)
else
	PV_WIDTH="${2}"
	PV_HEIGHT="${3}"
fi

## shellcheck disable=SC2034 # PV_HEIGHT is provided for convenience and unused
PV_IMAGE_ENABLED="True" # 'True' if image previews are enabled, 'False' otherwise.

FILE_EXTENSION="${FILE_PATH##*.}"
FILE_EXTENSION_LOWER="$(printf "%s" "${FILE_EXTENSION}" | tr '[:upper:]' '[:lower:]')"

## Settings
HIGHLIGHT_SIZE_MAX=4194288 # 4MiB
HIGHLIGHT_TABWIDTH="${HIGHLIGHT_TABWIDTH:-4}"
HIGHLIGHT_STYLE="${HIGHLIGHT_STYLE:-onedark}"
HIGHLIGHT_OPTIONS="--replace-tabs=${HIGHLIGHT_TABWIDTH} \
	--style=${HIGHLIGHT_STYLE} ${HIGHLIGHT_OPTIONS:-} \
	--config-file="${XDG_CONFIG_HOME:-$HOME/.config}/lf/highlight.theme" \
	--line-numbers \
	--force
	"
PYGMENTIZE_STYLE="${PYGMENTIZE_STYLE:-one-dark}"

run() {
	if hash "$1" >/dev/null 2>&1; then
		$* && exit
	fi
}

handle_extension() {
	case "${FILE_EXTENSION_LOWER}" in
	## Archive
	a | ace | alz | arc | arj | bz | bz2 | cab | cpio | deb | gz | jar | lha | lz | lzh | lzma | lzo | \
		rpm | rz | t7z | tar | tbz | tbz2 | tgz | tlz | txz | tZ | tzo | war | xpi | xz | Z | zip)
		run atool --list -- "${FILE_PATH}"
		run bsdtar --list --file "${FILE_PATH}"
		exit 2
		;;
	rar)
		## Avoid password prompt by providing empty password
		run unrar lt -p- -- "${FILE_PATH}"
		exit 2
		;;
	7z)
		## Avoid password prompt by providing empty password
		run 7z l -p -- "${FILE_PATH}"
		exit 2
		;;

	## PDF
	pdf)
		## Preview as text conversion
		run pdftotext -l 10 -nopgbrk -q -- "${FILE_PATH}" - |
			fmt -w "${PV_WIDTH}"
		run mutool draw -F txt -i -- "${FILE_PATH}" 1-10 |
			fmt -w "${PV_WIDTH}"
		run exiftool "${FILE_PATH}"
		exit 2
		;;

	## BitTorrent
	torrent)
		run transmission-show -- "${FILE_PATH}"
		exit 2
		;;

	## OpenDocument
	odt | sxw)
		## Preview as text conversion
		run odt2txt "${FILE_PATH}"
		## Preview as markdown conversion
		run glow -w "${PV_WIDTH}" -s dark \
			<(pandoc -s -t markdown -- "${FILE_PATH}")
		exit 2
		;;
	ods | odp)
		## Preview as text conversion (unsupported by pandoc for markdown)
		run odt2txt "${FILE_PATH}"
		exit 2
		;;

	## XLSX
	xlsx)
		## Preview as csv conversion
		## Uses: https://github.com/dilshod/xlsx2csv
		run xlsx2csv -- "${FILE_PATH}"
		exit 2
		;;

	## HTML
	htm | html | xhtml)
		## Preview as text conversion
		run w3m -dump "${FILE_PATH}"
		run lynx -dump -- "${FILE_PATH}"
		run elinks -dump "${FILE_PATH}"
		run glow -w "${PV_WIDTH}" -s dark \
			<(pandoc -s -t markdown -- "${FILE_PATH}")
		;;

	## JSON
	json)
		run jq --color-output . "${FILE_PATH}"
		run python -m json.tool -- "${FILE_PATH}"
		;;

	## Jupyter Notebooks
	ipynb)
		run glow <(jupyter nbconvert --to markdown "${FILE_PATH}" --stdout)
		run jupyter nbconvert --to markdown "${FILE_PATH}" --stdout
		run jq --color-output . "${FILE_PATH}"
		run python -m json.tool -- "${FILE_PATH}"
		;;

	## Markdown
	md)
		run glow -w "${PV_WIDTH}" -s dark "${FILE_PATH}"
		;;

	## Direct Stream Digital/Transfer (DSDIFF) and wavpack aren't detected
	## by file(1).
	dff | dsf | wv | wvc)
		run mediainfo "${FILE_PATH}"
		run exiftool "${FILE_PATH}"
		;; # Continue with next handler on failure
	esac
}

handle_image() {
	local mimetype="${1}"
	case "${mimetype}" in
	image/*)
		chafa "${FILE_PATH}" -s "${PV_WIDTH}x${PV_HEIGHT}"
		;;
	esac
}

handle_mime() {
	local mimetype="${1}"
	case "${mimetype}" in
	## RTF and DOC
	text/rtf | *msword)
		## Preview as text conversion
		## note: catdoc does not always work for .doc files
		## catdoc: http://www.wagner.pp.ru/~vitus/software/catdoc/
		run catdoc -- "${FILE_PATH}"
		exit 2
		;;

	## DOCX, ePub, FB2 (using markdown)
	## You might want to remove "|epub" and/or "|fb2" below if you have
	## uncommented other methods to preview those formats
	*wordprocessingml.document | */epub+zip | */x-fictionbook+xml)
		## Preview as markdown conversion
		run glow -w "${PV_WIDTH}" -s dark \
			<(pandoc -s -t markdown -- "${FILE_PATH}")
		exit 2
		;;

	## E-mails
	message/rfc822)
		## Parsing performed by mu: https://github.com/djcb/mu
		run mu view -- "${FILE_PATH}"
		exit 2
		;;

	## XLS
	*ms-excel)
		## Preview as csv conversion
		## xls2csv comes with catdoc:
		##   http://www.wagner.pp.ru/~vitus/software/catdoc/
		run xls2csv -- "${FILE_PATH}"
		exit 2
		;;
	text/troff)
		run man "${FILE_PATH}"
		;;

	## Text
	text/* | */xml)
		## Syntax highlight
		# highlight -t 4 -O truecolor --force --config-file="${XDG_CONFIG_HOME:-$HOME/.config}/lf/highlight.theme" "$1"
		if [[ "$(stat --printf='%s' -- "${FILE_PATH}")" -gt "${HIGHLIGHT_SIZE_MAX}" ]] && hash bat 2>/dev/null; then
			exit 2
		fi
		if [[ "$(tput colors)" -ge 256 ]]; then
			local pygmentize_format='terminal256'
			local highlight_format='truecolor'
		else
			local pygmentize_format='terminal'
			local highlight_format='ansi'
		fi
		local bat_fallback_ft=(pov)

		# shellcheck disable=2076
		if [[ ! " ${bat_fallback_ft[*]} " =~ " ${FILE_EXTENSION_LOWER} " ]]; then
			env COLORTERM=truecolor bat \
				--paging never \
				--wrap character \
				--terminal-width "$PV_WIDTH" \
				--color always \
				--style numbers \
				--tabs 4 \
				-- "${FILE_PATH}" && exit
		fi
		run env HIGHLIGHT_OPTIONS="${HIGHLIGHT_OPTIONS}" highlight \
			--out-format="${highlight_format}" -- "${FILE_PATH}"
		run pygmentize -f "${pygmentize_format}" -O "style=${PYGMENTIZE_STYLE}" \
			-- "${FILE_PATH}"
		exit 2
		;;

	## DjVu
	image/vnd.djvu)
		## Preview as text conversion (requires djvulibre)
		run djvutxt "${FILE_PATH}" | fmt -w "${PV_WIDTH}"
		run exiftool "${FILE_PATH}"
		exit 2
		;;

	## Image
	image/*)
		## show information about image
		run mediainfo "${FILE_PATH}"
		exit 2
		;;

	## Video and audio
	video/* | audio/*)
		run mediainfo "${FILE_PATH}"
		run exiftool "${FILE_PATH}"
		exit 2
		;;

	## ELF files (executables and shared objects)
	application/x-executable | application/x-pie-executable | application/x-sharedlib)
		run readelf -WCa "${FILE_PATH}"
		exit 2
		;;

	## Inodes
	inode/*)
		run ls --color=always "${FILE_PATH}" 2>/dev/null
		exit 2
		;;

	esac
}

handle_fallback() {
	echo '----- File Type Classification -----' && file --dereference --brief -- "${FILE_PATH}" && exit
	exit 2
}

MIMETYPE="$(file --dereference --brief --mime-type -- "${FILE_PATH}")"
if [[ "${PV_IMAGE_ENABLED}" == 'True' ]]; then
	handle_image "${MIMETYPE}"
fi
handle_extension
handle_mime "${MIMETYPE}"
handle_fallback

exit 2
