#!/usr/bin/bash

#flags
all=0
system=0
pip_=0
npm_=0
compile_cache=0
lsp=0
gpu=0

if (($# == 0)); then
	all=1
fi

usage() {
	echo "\
Usage: $0 [options]

Options:
-a		all
-s		package manager cache
-p		pip
-n		npm
-g		go
-r		rust
-c		ccache, sccache
-l		lsp
-G		shader cache
"
}

while getopts ":aspngrclGmh" opt; do
	case "$opt" in
	a) all=1 ;;
	s) system=1 ;;
	p) pip_=1 ;;
	n) npm_=1 ;;
	g) go=1 ;;
	c) compile_cache=1 ;;
	l) lsp=1 ;;
	G) gpu=1 ;;
	m) misc=1 ;;
	h | ?)
		usage
		exit
		;;
	esac
done

CACHE_DIR=${XDG_CACHE_HOME:-$HOME/.cache}

main() {
	[[ -f /etc/os-release ]] && . /etc/os-release

	if ((system)) || ((all)); then
		if [[ -n "$ID" ]] && [[ "$ID" == "arch" ]]; then
			if hash yay 2>/dev/null; then
				yes | LC_ALL=C yay -Scc
			else
				yes | LC_ALL=C pacman -Scc
			fi
		fi
	fi
	if ((pip_)) || ((all)); then
		pip cache purge
	fi
	if ((npm_)) || ((all)); then
		npm cache clean --force
	fi
	if ((go)) || ((all)); then
		go clean -modcache
		go clean -cache
	fi
	if ((compile_cache)) || ((all)); then
		ccache -C
		rm -rf "$CACHE_DIR/sccache"
	fi
	if ((lsp)) || ((all)); then
		rm -rf "$CACHE_DIR/jedi"
		rm -rf "$CACHE_DIR/clangd"
	fi
	if ((gpu)) || ((all)); then
		rm -rf "$CACHE_DIR/nv"
		rm -rf "$CACHE_DIR/nvidia"
		rm -rf "$CACHE_DIR/mesa_shader_cache"
	fi
	if ((misc)) || ((all)); then
		# CKAN downloads
		rm -rf "$XDG_DATA_HOME/CKAN/downloads"
		# vscode caches
		rm -rf "$XDG_CONFIG_HOME/Code/CachedExtensionVSIXs"
		rm -rf "$XDG_CONFIG_HOME/Code/Crashpad"
		rm -rf "$XDG_CONFIG_HOME/Code/Cache"
		rm -rf "$XDG_CONFIG_HOME/Code/CachedData"
		# packages
		rm -rf "$HOME/srv/build/pkg/*"
	fi
}

main
