# vim:ft=bash

# split words in zsh
set shell zsh
set shellopts '-euy'
set ifs "\n"
set filesep "\n"  # default already

# put lf into background
map <c-z> $ kill -STOP $PPID

#
# appearance
#
 
set icons
set dircounts
set info "size"

# previewer
set previewer ~/.config/lf/pv
map i $LESSOPEN='| ~/.config/lf/pv %s' less -R "$f"

# dynamically set number of clumns
cmd recol ${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}
recol

#
# file operation
#

# execute current file (must be executable)
map x $$f
map X !$f

# toggle show hidden file <C-H>
map <backspace> set hidden!

# trash
cmd trash %{{ gio trash "$fx" }}
map x trash

# mkdir
cmd mkdir %IFS=" "; mkdir -- "$*"
map a push :mkdir<space>

# fzf jump to file
cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map gf :fzf_jump

# ripgrep search contents of files
cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search

# copy/paste 
cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}
map P :link

#
# git
#

# '&' commands run silently in background (which is what we want here),
# but are not connected to stdout.
# To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
cmd on-cd &{{
# display git repository status in your prompt
	source /usr/share/git/completion/git-prompt.sh
	GIT_PS1_SHOWDIRTYSTATE=auto
	GIT_PS1_SHOWSTASHSTATE=auto
	GIT_PS1_SHOWUNTRACKEDFILES=auto
	GIT_PS1_SHOWUPSTREAM=auto
	git=$(__git_ps1 " (%s)") || true
	fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[35m$git\033[0m"
	lf -remote "send $id set promptfmt \"$fmt\""
	printf "\033]0; $PWD\007" > /dev/tty
}}
on-cd

}}
